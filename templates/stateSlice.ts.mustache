import { createSlice, PayloadAction, AnyAction } from '@reduxjs/toolkit'

export interface {{capName}}State {
  value: number
}

const initialState: {{capName}}State = {
  value: 0,
}

export const {{name}}Slice = createSlice({
  name: '{{name}}',
  initialState,
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
})

// Action creators are generated for each case reducer function
export const { increment, decrement, incrementByAmount } = {{name}}Slice.actions

export default {{name}}Slice.reducer

// use this function to customize the state that is displayed in the redux devtool, e.g. to remove large objects
export const {{name}}StateSanitizer = (state: {{capName}}State): object => state

// use this function to customize actions that are displayed in the redux devtool, e.g. to remove large objects
export const {{name}}ActionSanitizer = (action: AnyAction): object => action
