import { createSlice, createAsyncThunk, PayloadAction, AnyAction } from '@reduxjs/toolkit'
import type { RootState } from './index'

export interface {{capName}}State {
  value: number
  thunkResult: number
  thunkInProgress: boolean
}

const initialState: {{capName}}State = {
  value: 0,
  thunkResult: 0,
  thunkInProgress: false,
}

export const {{name}}Thunk = createAsyncThunk(
  '{{name}}/{{name}}Thunk',
  async (params, { dispatch }) => {
    return 1
  },
  {
    condition: (params, { getState, extra }) => {
      const { {{name}} } = getState() as RootState
      return !{{name}}.thunkInProgress
    },
  },
)

export const {{name}}Slice = createSlice({
  name: '{{name}}',
  initialState,
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
  extraReducers: (builder) => {
    builder.addCase({{name}}Thunk.pending, (state, action) => {
      state.thunkInProgress = true
    })

    builder.addCase({{name}}Thunk.fulfilled, (state, action) => {
      state.thunkInProgress = false
      state.thunkResult = action.payload
    })

    builder.addCase({{name}}Thunk.rejected, (state, action) => {
      state.thunkInProgress = false
    })
  },
})

// Action creators are generated for each case reducer function
export const { increment, decrement, incrementByAmount } = {{name}}Slice.actions

export default {{name}}Slice.reducer

// use these functions to customize the state/actions displayed in the redux devtool, e.g. to remove large objects
export const {{name}}StateSanitizer = (state: {{capName}}State): object => state
export const {{name}}ActionSanitizer = (action: AnyAction): AnyAction => action
